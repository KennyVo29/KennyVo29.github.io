---
layout: post
title:  "Blog Post: 9"
date:   2020-11-06 12:00:41 -0700
categories: jekyll update
---

This week I had to make a virtual pet for my web development class.  I was to create a webpage using the provided structure that included functionality for the game. I needed to program the webpage in a way to allow my pet to gain stats based on the action I was doing within the game.  
This is my pet : https://pond-organized-walkover.glitch.me/
## What is a Giga Pet?
Giga Pet was a popular electronic game in the 1990s that featured a game that allowed you to have your very own virtual pet. When you start the game, you get a random virtual pet that you can perform various actions that will affect their stats. Some of these actions like bathing, exercising, discipling will cause your pet to either gain or lose stats and cause them to grow.
### First Step

The project provided us with some bare bone structure to our virtual pet game. I created this project on glitch. This is how it looks with the show feature of this site.
![image](/assets/images/1st.starter.jpg)
![image](/assets/images/2nd.html.jpg)
The requirements for this project instruct me complete these following steps in order to complete this assignment. 
-	Create a pet_info object with keys "name", "weight", "happiness" and set initial values.Set this equal to variable "pet_info"
-	Add behavior to buttons When your pet receives a treat, add to its happiness andweight. When your pet exercises, reduce it's happiness and weight. When your petplays, add to its happiness and reduce its weight
-	Fix key bug to make sure keys can't go below zero (can use conditional)
-	Add a new action button
-	Add a new behavior that correlates with the new button you added. You can add it below the happiness text in the html
-	Add a notification after each button press with a comment from your pet. 
I first made a “pet_info” object by initializing using this command 
-	“var pet_info = {name: “Pikachu”, weight:”25, happiness:”??”};
I then added some behaviors to the action button once pressed. I added these codes to each button to affect the newly made pet_info object I created in first step.
![image](/assets/images/button.jpg)
The above function makes it so that when the button play is pressed, it will call on this function using the onclick option. The clickedPlayButton will perform a if else statement checking if Pikachu’s energy and weight value is below zero or not. If it is then it will display the appropriate message letting the player know that those values and preventing them from doing those actions. If none of those condtions are true than this function will update the values in the pet_info object which will display on the website. I did this too all the buttons. 
![image](/assets/images/checkpetweight.jpg)

For the third step, I created a function that fixed the key bug where it prevented the values within the pet_info object to go below zero. When a button is clicked, it executes the above function that uses a if else statement to check if the weight is below 1. If the weight is below one, it will set the value of weight to 1 regardless of the previous initialization.
![image](/assets/images/sleep.jpg)
For the fourth step, I created another action button called sleep that functioned similarly to the other buttons. I also made a correlating behavior (pet_info) that responded to the sleep button,
For the last step, I added a alert() feature to every button once pressed. It provides a small message from Pikachu and it also updates the player on what stats have been changed. I also added some audio to every action button.
Outside of the requirements of the project, I changed the overall base structure of the page by adding CSS and some javascript.
